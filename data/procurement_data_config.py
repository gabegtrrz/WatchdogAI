# procurement_data_config.py
### This is where data configuration is stored for clean and maintainable code
### Scenario is procurement of Educational Materials for Grade 10 Science Class

import pandas as pd
import csv
import os

# Path to the CSV file generated by scraper.py
CSV_FILE = "data/item_average_prices.csv"

def load_prices_from_csv(csv_file):
    prices = {}
    if not os.path.exists(csv_file):
        print(f"CSV file {csv_file} not found. Please run scraper.py first.")
        return prices
    
    with open(csv_file, mode="r", encoding="utf-8") as file:
        reader = csv.DictReader(file)
        for row in reader:
            prices[row["item"]] = float(row["avg_price"])
    return prices

# Load prices from CSV at module level
AVERAGE_PRICES = load_prices_from_csv(CSV_FILE)

### PROCUREMENT_METHODS HERE ###

METHODS_DATA = {
    "Competitive Bidding": {
        "frequency": 0.5,
        "items": {
            "Compound Microscope": AVERAGE_PRICES.get("Compound Microscope", 0.0),
            "Beaker 50ml": AVERAGE_PRICES.get("Beaker 50ml", 0.0),
            "Beaker 100ml": AVERAGE_PRICES.get("Beaker 100ml", 0.0),
            "Beaker 250ml": AVERAGE_PRICES.get("Beaker 250ml", 0.0), 
            "Test Tube 15ml": AVERAGE_PRICES.get("Test Tube 15ml", 0.0), 
            "Bunsen Burner": AVERAGE_PRICES.get("Bunsen Burner", 0.0),
            "Thermometer (-10 to 110C)": AVERAGE_PRICES.get("Thermometer (-10 to 110C)", 0.0), 
            "Microscope Slides": AVERAGE_PRICES.get("Microscope Slides", 0.0),
            "Lab Manual - Grade 10 Science": AVERAGE_PRICES.get("Lab Manual - Grade 10 Science", 0.0),
            "Erlenmeyer Flask 250ml": AVERAGE_PRICES.get("Erlenmeyer Flask 250ml", 0.0),
            "Test Tube Rack": AVERAGE_PRICES.get("Test Tube Rack", 0.0),
            "Filter Paper pack of 100": AVERAGE_PRICES.get("Filter Paper pack of 100", 0.0),
        }
    },
    "Limited Source Bidding": {
        "frequency": 0.2,
        "items": {
            "Refracting Telescope 70mm": AVERAGE_PRICES.get("Refracting Telescope 70mm", 0.0),
            "Triple Beam Balance": AVERAGE_PRICES.get("Triple Beam Balance", 0.0),
            "pH Meter basic": AVERAGE_PRICES.get("pH Meter basic", 0.0),
            "Graduated Cylinder 100ml": AVERAGE_PRICES.get("Graduated Cylinder 100ml", 0.0),
            "Hot Plate basic": AVERAGE_PRICES.get("Hot Plate basic", 0.0),
            "Stopwatch digital": AVERAGE_PRICES.get("Stopwatch digital", 0.0),
            "Prism glass": AVERAGE_PRICES.get("Prism glass", 0.0),
            "Spring Scale 500g": AVERAGE_PRICES.get("Spring Scale 500g", 0.0),
            "Bar Magnet pair": AVERAGE_PRICES.get("Bar Magnet pair", 0.0),
            "Tuning Fork 256 Hz": AVERAGE_PRICES.get("Tuning Fork 256 Hz", 0.0),
            "Lens Set convex concave": AVERAGE_PRICES.get("Lens Set convex concave", 0.0),
            "Ammeter basic": AVERAGE_PRICES.get("Ammeter basic", 0.0),
        }
    },
    "Negotiated Procurement": {
        "frequency": 0.2,
        "items": {
            "Voltmeter basic": AVERAGE_PRICES.get("Voltmeter basic", 0.0),
            "Hydrochloric Acid": AVERAGE_PRICES.get("Hydrochloric Acid", 0.0),
            "Dissecting Kit": AVERAGE_PRICES.get("Dissecting Kit", 0.0),
            "Petri Dishes pack of 20": AVERAGE_PRICES.get("Petri Dishes pack of 20", 0.0),
            "Universal Indicator Solution 100ml": AVERAGE_PRICES.get("Universal Indicator Solution 100ml", 0.0),
            "Copper Sulfate": AVERAGE_PRICES.get("Copper Sulfate", 0.0),
            "Rubber Stoppers": AVERAGE_PRICES.get("Rubber Stoppers", 0.0),
            "Dropper Bottle 50ml": AVERAGE_PRICES.get("Dropper Bottle 50ml", 0.0),
            "Agar Powder 100g": AVERAGE_PRICES.get("Agar Powder 100g", 0.0),
            "Iron Filings 250g": AVERAGE_PRICES.get("Iron Filings 250g", 0.0),
        }
    },
    "Direct Contracting": {
        "frequency": 0.1,
        "items": {
            "Safety Goggles": AVERAGE_PRICES.get("Safety Goggles", 0.0),
            "Litmus Paper": AVERAGE_PRICES.get("Litmus Paper", 0.0),
            "Pipette 10ml": AVERAGE_PRICES.get("Pipette 10ml", 0.0),
            "Gloves nitrile box of 100": AVERAGE_PRICES.get("Gloves nitrile box of 100", 0.0),
            "Lab Aprons pack of 10": AVERAGE_PRICES.get("Lab Aprons pack of 10", 0.0),
            "Funnel plastic 100mm": AVERAGE_PRICES.get("Funnel plastic 100mm", 0.0),
            "Alcohol Burner": AVERAGE_PRICES.get("Alcohol Burner", 0.0),
            "Fire Blanket": AVERAGE_PRICES.get("Fire Blanket", 0.0),
            "Test Tube Brush": AVERAGE_PRICES.get("Test Tube Brush", 0.0),
            "Microscope Coverslips box of 100": AVERAGE_PRICES.get("Microscope Coverslips box of 100", 0.0),
            "Spatula stainless steel": AVERAGE_PRICES.get("Spatula stainless steel", 0.0),
        }
    }
}

# Converting this into a DataFrame for manageable data handling
rows = []
for method, values in METHODS_DATA.items():
    frequency = values['frequency']
    items = values['items']

    for item, base_price in items.items():
        row = {
            "Method": method,
            "Frequency": frequency,
            "Item_Name": item,
            "Base_Price": base_price
        }
        rows.append(row)

### Final Procurement Data HERE

PROCUREMENT_DATA = pd.DataFrame(rows)

PROCUREMENT_OFFICERS = [
        'Casey Hernandez',
        'Alex Rivera',
        'James Patrick Mendoza',
        'Morgan Cruz',
        'Angela Ramirez',
        'Taylor Martinez',
        'Sophia Christine Navarro',
        'Angela Renee Mendoza',
        'Luke Andrew Navarro',
        'Jamie Thompson',
        'Christine Bautista',
        ]

### VOLATILITY VARIABLES (adjust for overall price fluctuation)
VOLATILITY_LOW = 0.05
VOLATILITY_MEDIUM = 0.10
VOLATILITY_HIGH = 0.15

BASE_PRICES = {
        "Compound Microscope (1000x)": 121409.38,
        "Refracting Telescope (70mm)": 5207.81,
        "Beaker (50ml)": 161.00,
        "Beaker (100ml)": 182.00,
        "Beaker (250ml)": 238.00,
        "Beaker (500ml)": 375.00,
        "Test Tube (10ml)": 19.00,
        "Test Tube (20ml)": 25.00,
        "Bunsen Burner": 334.62,
        "Triple Beam Balance": 2989.00,
        "Microscope Slides (box of 50)": 489.01,
        "Microscope Coverslips (box of 100)": 7520.34,
        "Dissecting Kit (basic)": 630.79,
        "Sodium Chloride (NaCl) - Solid (1kg)": 2700,
        "Hydrochloric Acid (HCl) - 1M (1L)": 1475.13,
        "Lab Manual - Grade 10 Science": 333.30,
        "Reflecting Telescope (150mm)": 20255.87,
        "Digital Spectrophotometer": 18519.60,
        "High-Precision Balance": 15915,
        "Potassium Iodide (KI) - Solid (500g)": 1661,
        "AmScope M150B-LED Replacement LED Bulb": 693.93,
        "Beaker (1000ml)": 2044,
        "Replacement Xenon Flash Lamp for Do PerkinElmer])": 2893.78,
        "Sulfuric Acid (H2SO4) - 1M (1L)": 1302
}

ITEMS = list(BASE_PRICES.keys())

''' WE NEED TO PUT THIS IN PROCUREMENT_DATA.PY
    procurement_methods = {
    "Competitive Bidding": {
        "items": ["Compound Microscope (1000x)", "Refracting Telescope (70mm)", "Beaker (50ml)", "Beaker (100ml)", "Beaker (250ml)", "Beaker (500ml)", "Test Tube (10ml)", "Test Tube (20ml)", "Bunsen Burner", "Triple Beam Balance", "Microscope Slides (box of 50)", "Microscope Coverslips (box of 100)", "Dissecting Kit (basic)", "Sodium Chloride (NaCl) - Solid (1kg)", "Hydrochloric Acid (HCl) - 1M (1L)", "Lab Manual - Grade 10 Science"],
        "frequency": 0.5
    },
    "Limited Source Bidding": {
        "items": ["Reflecting Telescope (150mm)", "Digital Spectrophotometer", "Data Analysis Software (Logger Pro)", "High-Precision Balance"],
        "frequency": 0.2
    },
    "Negotiated Procurement": {
        "items": ["Potassium Iodide (KI) - Solid (500g)", "AmScope M150B-LED Replacement LED Bulb", "Beaker (1000ml)"],
        "frequency": 0.2
    },
    "Direct Contracting": {
        "items": ['Calibration Service (for high-precision balance)', "Replacement Xenon Flash Lamp for Do PerkinElmer", "Sulfuric Acid (H2SO4) - 1M (1L)"], 
        "frequency": 0.1
    }
    }
'''